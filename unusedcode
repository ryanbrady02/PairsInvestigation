#attempt to find general solution
from sympy import symbols, Function, Eq, dsolve, Derivative

# Define symbols and functions
t, a, b, c, d, e, f, g, h, k = symbols('t a b c d e f g h k')
Y = Function('Y')(t)
Z = Function('Z')(t)
M = Function('M')(t)

# Define the system of differential equations
eq1 = Eq(Derivative(Y, t), c/(a + b*M) - k*Y)
eq2 = Eq(Derivative(Z, t), e*Y - f*Z)
eq3 = Eq(Derivative(M, t), g*Z - h*M)

# Solve the system algebraically
sol = dsolve([eq1, eq2, eq3]) #this line fails and sympy cannot find a general solution

# Display the symbolic algebraic solutions
print("Algebraic solutions:")
for eq in sol:
    print(eq)
----
#finding jacobian matrix in order to explain stability of equilibrium points
from sympy import symbols, Function, diff, Eq, solve, pprint

# Define symbols and functions
t, a, b, c, d, e, f, g, h, k = symbols('t a b c d e f g h k')
Y, Z, M = symbols('Y Z M', cls=Function)

# Define the differential equations
eq1 = Eq(diff(Y(t), t), c / (a + b * M(t)) - k * Y(t))
eq2 = Eq(diff(Z(t), t), e * Y(t) - f * Z(t))
eq3 = Eq(diff(M(t), t), g * Z(t) - h * M(t))

from sympy import Matrix, re, pprint

# Define positive constants
positive_constants = {a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, k: 1}


# Calculate Jacobian matrix
Jacobian_matrix = Matrix([[diff(eq1.rhs, var) for var in [Y(t), Z(t), M(t)]],
                          [diff(eq2.rhs, var) for var in [Y(t), Z(t), M(t)]],
                          [diff(eq3.rhs, var) for var in [Y(t), Z(t), M(t)]]])

pprint(Jacobian_matrix)

----

#attempt at finding signs of eigenvalues for jacobian matrix, hence the stability of eq points
import sympy as sp

# Define symbolic variables
a, b, c, d, e, f, g, h, k, M = sp.symbols('a b c d e f g h k M',positive=True)

# Define the matrix
matrix = sp.Matrix([
    [-k, 0, -c / (a + (b * M))**2],
    [-e, f, 0],
    [0, g, -h]
])

# Calculate eigenvalues symbolically
eigenvalues = matrix.eigenvals()

# Analyze signs of eigenvalues
signs = [sp.sign(eig) for eig in eigenvalues]

# Display the symbolic expressions for the eigenvalues and their signs
print(signs)
#eigenvalues are way too complicated to give any real meaning

----
